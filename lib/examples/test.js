"use strict";
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"test.js","sourceRoot":"","sources":["../../src/examples/test.ts"],"names":[],"mappings":"","sourcesContent":["\n// import { JsonDecoder, jsonDecodable, jsonProperty, jsonType } from '../'\n// import { JsonDecoderValidationError } from '../json/json-decoder-errors'\n\n// @jsonDecodable({\n//     useConstructor: true,\n// })\n// class Test {\n\n//     @jsonProperty\n//     @jsonType(Boolean)\n//     test: boolean = false\n\n// }\n\n// // @jsonDecodable()\n// // @jsonSchema({\n// //     $schema: 'http://json-schema.org/draft-07/schema',\n// //     description: 'Sub type',\n// //     type: 'object',\n// //     required: ['value', 'testValue'],\n// //     dependencies: {\n// //         value: ['testValue'],\n// //     },\n// //     additionalProperties: false,\n// //     properties: {\n// //         value: {\n// //             type: ['string', 'number'],\n// //         },\n// //         testValue: {\n// //             type: 'boolean',\n// //         },\n// //     },\n// //     errorMessage: {\n// //         _: '{{propertyPath}} should be a number or a string representing a number',\n// //         required: {\n// //             value: '{{propertyPath}} should be defined as a string or number value',\n// //             testValue: '',\n// //         },\n// //         dependencies: {\n// //             value: 'Using {{propertyPath}} required {{missingProperty}} be set',\n// //         },\n// //         additionalProperties: 'FAIL! {{additionalProperty}}',\n// //     },\n// // })\n// // class SubType {\n// //     @jsonPropertyAlias('value')\n// //     @jsonType(Number)\n// //     itemValue!: number\n// // }\n\n// // @jsonDecodable()\n// // @jsonSchema({\n// //     $schema: 'http://json-schema.org/draft-07/schema',\n// //     type: 'object',\n// //     description: 'schema for find-and-load requests',\n// //     required: [ 'subType' ],\n// //     properties: {\n// //         subType: {\n// //             $ref: '#/SubType',\n// //         },\n// //     },\n// //     errorMessage: {\n// //         required: {\n// //             subType: '{{missingProperty}} missing fool from {{propertyPath}}',\n// //         },\n// //     },\n// // })\n// // class Test {\n// //     @jsonProperty\n// //     @jsonType(SubType)\n// //     subType!: SubType\n\n// //     toString() {\n// //         return `itemValue: ${this.subType.itemValue}`\n// //     }\n// // }\n\n\n// @jsonDecodable()\n// @jsonSchema(\n//   {\n//     $id: '//schemas.sonos.com/find:1/FindAndLoadRequest',\n//     $schema: 'http://json-schema.org/draft-07/schema',\n//     type: 'object',\n//     required: ['foo'],\n//     properties: {\n//       foo: { type: 'integer' },\n//       timezone: {\n//         $ref: 'http://schemas.sonos.com/types/basic#/definitions/Timezone',\n//       },\n//       preferredServices: {\n//         $ref: 'http://schemas.sonos.com/types/basic#/definitions/PreferredServices',\n//       },\n//       preferredServicesOnly: {\n//         $ref: 'http://schemas.sonos.com/types/basic#/definitions/Boolean',\n//       },\n//     },\n//     additionalProperties: false,\n//     errorMessage: {\n//       type: 'should be an object', // will not replace internal \"type\" error for the property \"foo\"\n//       required: {\n//         foo: 'should have property foo',\n//       },\n//       additionalProperties: 'should not have properties other than {{additionalProperty}}',\n//     },\n//   },\n// // {\n// //     $id: '//schemas.sonos.com/find:1/FindAndLoadRequest',\n// //     $schema: 'http://json-schema.org/draft-07/schema',\n// //     description: 'Schema for find:1 findAndLoad requests',\n// //     type: 'object',\n// //     required: [\n// //       'timezone',\n// //     ],\n// //     dependencies: {\n// //       preferredServicesOnly: [\n// //         'preferredServices',\n// //       ],\n// //     },\n// //     additionalProperties: false,\n// //     properties: {\n// //       timezone: {\n// //         $ref: 'http://schemas.sonos.com/types/basic#/definitions/Timezone',\n// //       },\n// //       preferredServices: {\n// //         $ref: 'http://schemas.sonos.com/types/basic#/definitions/PreferredServices',\n// //       },\n// //       preferredServicesOnly: {\n// //         $ref: 'http://schemas.sonos.com/types/basic#/definitions/Boolean',\n// //       },\n// //     },\n// //     errorMessages: {\n// //       properties: {\n// //         timezone: '{{propertyPath}} is missing and is required for all findAndLoad requests',\n// //       }\n// //       //_: 'Bummer',\n// //       type: 'Totally invalid',\n// //       // required: {\n// //       //   timezone: '{{propertyPath}} is missing and is required for all findAndLoad requests',\n// //       // },\n// //       // depedencies: {\n// //       //   preferredServicesOnly: '{{propertyPath}} requires {{property}} to be specified if used',\n// //       // },\n// //       // additionalProperties: 'findAndLoad does not support {{additionalProperty}}',\n// //     },\n// //     errorMessage: 'Ah shit {{property}} {{additionalProperty}} {{propertyPath}}',\n// // },\n//   {\n//     $schema: 'http://json-schema.org/draft-07/schema',\n//     $id: 'http://schemas.sonos.com/types/basic',\n//     definitions: {\n//       Boolean: {\n//         type: 'boolean',\n//         errorMessage: {\n//           type: '{{propertyPath}} should be either \\'true\\' or \\'false\\'',\n//         },\n//       },\n//       ContentServiceId: {\n//         oneOf: [\n//           {\n//             type: 'string',\n//             pattern: '^[a-zA-Z0-0-\\\\.]+$',\n//           },\n//           {\n//             type: 'number',\n//           },\n//         ],\n//         errorMessage: {\n//           _: '{{propertyPath}} should be a string representing a service identifier, like \\'apple-music\\' or \\'spotify',\n//         },\n//       },\n//       PreferredServices: {\n//         type: 'array',\n//         minItems: 1,\n//         items: {\n//           $ref: '#/definitions/ContentServiceId',\n//         },\n//         errorMessage: {\n//           _: '{{propertyPath}} should be an list of service identifers, like \\'apple-music\\' or \\'spotify\\'',\n//           minItems: '{{propertyPath}} needs to have at least one service identifier if specified',\n//           unique: '{{propertyPath}} should only include each service identifier once',\n//         },\n//       },\n//       Timezone: {\n//         type: 'string',\n//         pattern: '^[zZ]$|([\\\\+-])(([0|1]?\\\\d)|(2[0-3]))(\\\\:[0|1|3|4][0|5])?$',\n//         errorMessage: {\n//           _: '{{propertyPath} has to be a valid ISO8601 string representing a time zone',\n//         },\n//       },\n//     },\n//   },\n// )\n// class Test {\n\n// }\n\n// try {\n//     const t = JsonDecoder.decode<Test>({\n//       test: '1',\n//     }, Test, {\n//         lazyDecode: true,\n//     })\n//     console.log(t!.test)\n//     console.log(t!.test)\n// } catch (err) {\n//     console.error((err as JsonDecoderValidationError).validationErrors[0].message)\n// }\n"]}