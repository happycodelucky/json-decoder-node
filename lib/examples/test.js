"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("../");
let Test = class Test {
    constructor() {
        this.test = false;
    }
};
__decorate([
    __1.jsonProperty,
    __1.jsonType(Boolean)
], Test.prototype, "test", void 0);
Test = __decorate([
    __1.jsonDecodable({
        useConstructor: true,
    })
], Test);
try {
    const t = __1.JsonDecoder.decode({
        test: '1',
    }, Test, {
        lazyDecode: true,
    });
    console.log(t.test);
    console.log(t.test);
}
catch (err) {
    console.error(err.validationErrors[0].message);
}
//# sourceMappingURL=data:application/json;base64,