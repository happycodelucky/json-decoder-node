"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toNumber = void 0;
function toNumber(value, strict = false) {
    if (value === undefined) {
        return undefined;
    }
    if (Array.isArray(value)) {
        if (strict) {
            throw new TypeError(`'${value}' does not represent a Boolean`);
        }
        if (value.length > 0) {
            return toNumber(value[0], strict);
        }
        else {
            return undefined;
        }
    }
    if (typeof value === 'number') {
        return value;
    }
    if (typeof value === 'boolean') {
        return value ? 1 : 0;
    }
    else if (typeof value === 'string') {
        let trimmedValue = value.trim();
        const prefixMatch = /^([-+])?[ \t]*/.exec(trimmedValue);
        if (prefixMatch && prefixMatch[0].length) {
            trimmedValue = trimmedValue.slice(prefixMatch[0].length);
        }
        const factor = prefixMatch && prefixMatch[1] === '-' ? -1 : 1;
        if (trimmedValue.startsWith('0x') || trimmedValue.startsWith('0X')) {
            const matches = /^[0-9A-F]+$/i.exec(trimmedValue.slice(2));
            if (matches) {
                return Number.parseInt(matches[0], 16) * factor;
            }
        }
        else if (trimmedValue.startsWith('0b') || trimmedValue.startsWith('0B')) {
            const matches = /^[01]+$/.exec(trimmedValue.slice(2));
            if (matches) {
                return Number.parseInt(matches[0], 2) * factor;
            }
        }
        else {
            const matches = /^[0-9,]*([\.])?([0-9]+)?([Ee][+-]?[0-9]+)?$/.exec(trimmedValue);
            if (matches) {
                const matchedValue = matches[0].replace(/,/g, '');
                if (matches.length > 1) {
                    return Number.parseFloat(matchedValue) * factor;
                }
                else {
                    return Number.parseInt(matchedValue, 10) * factor;
                }
            }
        }
        if (strict) {
            throw new TypeError(`'${value}' does not represent a Number`);
        }
    }
    if (strict) {
        throw new TypeError(`'${typeof value} cannot be converted to a Number`);
    }
    return Number.NaN;
}
exports.toNumber = toNumber;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnVtYmVyLW1hcnNoYWxsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbWFyc2hhbGxlcnMvbnVtYmVyLW1hcnNoYWxsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBUUEsU0FBZ0IsUUFBUSxDQUFDLEtBQVUsRUFBRSxTQUFrQixLQUFLO0lBQ3hELElBQUksS0FBSyxLQUFLLFNBQVMsRUFBRTtRQUNyQixPQUFPLFNBQVMsQ0FBQTtLQUNuQjtJQUdELElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUN0QixJQUFJLE1BQU0sRUFBRTtZQUNSLE1BQU0sSUFBSSxTQUFTLENBQUMsSUFBSSxLQUFLLGdDQUFnQyxDQUFDLENBQUE7U0FDakU7UUFFRCxJQUFJLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ2xCLE9BQU8sUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQTtTQUNwQzthQUFNO1lBQ0gsT0FBTyxTQUFTLENBQUE7U0FDbkI7S0FDSjtJQUVELElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFO1FBQzNCLE9BQU8sS0FBSyxDQUFBO0tBQ2Y7SUFFRCxJQUFJLE9BQU8sS0FBSyxLQUFLLFNBQVMsRUFBRTtRQUM1QixPQUFPLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDdkI7U0FBTSxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtRQUNsQyxJQUFJLFlBQVksR0FBRyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUE7UUFDL0IsTUFBTSxXQUFXLEdBQUcsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFBO1FBQ3ZELElBQUksV0FBVyxJQUFJLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUU7WUFDdEMsWUFBWSxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFBO1NBQzNEO1FBRUQsTUFBTSxNQUFNLEdBQUcsV0FBVyxJQUFJLFdBQVcsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFFN0QsSUFBSSxZQUFZLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLFlBQVksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDaEUsTUFBTSxPQUFPLEdBQUcsY0FBYyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDMUQsSUFBSSxPQUFPLEVBQUU7Z0JBRVQsT0FBTyxNQUFNLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUE7YUFDbEQ7U0FDSjthQUFNLElBQUksWUFBWSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxZQUFZLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3ZFLE1BQU0sT0FBTyxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1lBQ3JELElBQUksT0FBTyxFQUFFO2dCQUVULE9BQU8sTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFBO2FBQ2pEO1NBQ0o7YUFBTTtZQUNILE1BQU0sT0FBTyxHQUFHLDZDQUE2QyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQTtZQUNoRixJQUFJLE9BQU8sRUFBRTtnQkFDVCxNQUFNLFlBQVksR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQTtnQkFDakQsSUFBSSxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtvQkFDcEIsT0FBTyxNQUFNLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxHQUFHLE1BQU0sQ0FBQTtpQkFDbEQ7cUJBQU07b0JBRUgsT0FBTyxNQUFNLENBQUMsUUFBUSxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUE7aUJBQ3BEO2FBQ0o7U0FDSjtRQUVELElBQUksTUFBTSxFQUFFO1lBQ1IsTUFBTSxJQUFJLFNBQVMsQ0FBQyxJQUFJLEtBQUssK0JBQStCLENBQUMsQ0FBQTtTQUNoRTtLQUNKO0lBRUQsSUFBSSxNQUFNLEVBQUU7UUFDUixNQUFNLElBQUksU0FBUyxDQUFDLElBQUksT0FBTyxLQUFLLGtDQUFrQyxDQUFDLENBQUE7S0FDMUU7SUFFRCxPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUE7QUFDckIsQ0FBQztBQXBFRCw0QkFvRUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvbnZlcnRzIGEgSlNPTiB2YWx1ZSB0byBhIE51bWJlciwgaWYgcG9zc2libGVcbiAqXG4gKiBAcGFyYW0gdmFsdWUgLSB2YWx1ZSB0byBjb252ZXJ0IHRvIGEgTnVtYmVyXG4gKiBAcGFyYW0gc3RyaWN0IC0gd2hlbiB0cnVlLCBwYXJzaW5nIGlzIHN0cmljdCBhbmQgdGhyb3dzIGEgVHlwZUVycm9yIGlmIHRoZSB2YWx1ZSBjYW5ub3QgYmUgY29udmVydGVkXG4gKlxuICogQHJldHVybiBwYXJzZWQgbnVtYmVyLCBOYU4sIG9yIHVuZGVmaW5lZFxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9OdW1iZXIodmFsdWU6IGFueSwgc3RyaWN0OiBib29sZWFuID0gZmFsc2UpOiBudW1iZXIgfCB1bmRlZmluZWQge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICB9XG5cbiAgICAvLyBFeHRyYWN0IDAgaW5kZXggb2YgYW4gYXJyYXlcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgaWYgKHN0cmljdCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgJyR7dmFsdWV9JyBkb2VzIG5vdCByZXByZXNlbnQgYSBCb29sZWFuYClcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdG9OdW1iZXIodmFsdWVbMF0sIHN0cmljdClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJykge1xuICAgICAgICByZXR1cm4gdmFsdWUgPyAxIDogMFxuICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICBsZXQgdHJpbW1lZFZhbHVlID0gdmFsdWUudHJpbSgpXG4gICAgICAgIGNvbnN0IHByZWZpeE1hdGNoID0gL14oWy0rXSk/WyBcXHRdKi8uZXhlYyh0cmltbWVkVmFsdWUpXG4gICAgICAgIGlmIChwcmVmaXhNYXRjaCAmJiBwcmVmaXhNYXRjaFswXS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRyaW1tZWRWYWx1ZSA9IHRyaW1tZWRWYWx1ZS5zbGljZShwcmVmaXhNYXRjaFswXS5sZW5ndGgpXG4gICAgICAgIH1cbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGU6bm8tbWFnaWMtbnVtYmVyc1xuICAgICAgICBjb25zdCBmYWN0b3IgPSBwcmVmaXhNYXRjaCAmJiBwcmVmaXhNYXRjaFsxXSA9PT0gJy0nID8gLTEgOiAxXG5cbiAgICAgICAgaWYgKHRyaW1tZWRWYWx1ZS5zdGFydHNXaXRoKCcweCcpIHx8IHRyaW1tZWRWYWx1ZS5zdGFydHNXaXRoKCcwWCcpKSB7XG4gICAgICAgICAgICBjb25zdCBtYXRjaGVzID0gL15bMC05QS1GXSskL2kuZXhlYyh0cmltbWVkVmFsdWUuc2xpY2UoMikpXG4gICAgICAgICAgICBpZiAobWF0Y2hlcykge1xuICAgICAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlOm5vLW1hZ2ljLW51bWJlcnNcbiAgICAgICAgICAgICAgICByZXR1cm4gTnVtYmVyLnBhcnNlSW50KG1hdGNoZXNbMF0sIDE2KSAqIGZhY3RvclxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRyaW1tZWRWYWx1ZS5zdGFydHNXaXRoKCcwYicpIHx8IHRyaW1tZWRWYWx1ZS5zdGFydHNXaXRoKCcwQicpKSB7XG4gICAgICAgICAgICBjb25zdCBtYXRjaGVzID0gL15bMDFdKyQvLmV4ZWModHJpbW1lZFZhbHVlLnNsaWNlKDIpKVxuICAgICAgICAgICAgaWYgKG1hdGNoZXMpIHtcbiAgICAgICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZTpuby1tYWdpYy1udW1iZXJzXG4gICAgICAgICAgICAgICAgcmV0dXJuIE51bWJlci5wYXJzZUludChtYXRjaGVzWzBdLCAyKSAqIGZhY3RvclxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgbWF0Y2hlcyA9IC9eWzAtOSxdKihbXFwuXSk/KFswLTldKyk/KFtFZV1bKy1dP1swLTldKyk/JC8uZXhlYyh0cmltbWVkVmFsdWUpXG4gICAgICAgICAgICBpZiAobWF0Y2hlcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1hdGNoZWRWYWx1ZSA9IG1hdGNoZXNbMF0ucmVwbGFjZSgvLC9nLCAnJylcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2hlcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBOdW1iZXIucGFyc2VGbG9hdChtYXRjaGVkVmFsdWUpICogZmFjdG9yXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGU6bm8tbWFnaWMtbnVtYmVyc1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gTnVtYmVyLnBhcnNlSW50KG1hdGNoZWRWYWx1ZSwgMTApICogZmFjdG9yXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0cmljdCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgJyR7dmFsdWV9JyBkb2VzIG5vdCByZXByZXNlbnQgYSBOdW1iZXJgKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHN0cmljdCkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGAnJHt0eXBlb2YgdmFsdWV9IGNhbm5vdCBiZSBjb252ZXJ0ZWQgdG8gYSBOdW1iZXJgKVxuICAgIH1cblxuICAgIHJldHVybiBOdW1iZXIuTmFOXG59XG4iXX0=