"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function toNumber(value, strict = false) {
    if (value === undefined) {
        return undefined;
    }
    if (Array.isArray(value)) {
        if (strict) {
            throw new TypeError(`'${value}' does not represent a Boolean`);
        }
        if (value.length > 0) {
            return toNumber(value[0], strict);
        }
        else {
            return undefined;
        }
    }
    if (typeof value === 'number') {
        return value;
    }
    if (typeof value === 'boolean') {
        return value ? 1 : 0;
    }
    else if (typeof value === 'string') {
        let trimmedValue = value.trim();
        const prefixMatch = /^([-+])?[ \t]*/.exec(trimmedValue);
        if (prefixMatch && prefixMatch[0].length) {
            trimmedValue = trimmedValue.slice(prefixMatch[0].length);
        }
        const factor = prefixMatch && prefixMatch[1] === '-' ? -1 : 1;
        if (trimmedValue.startsWith('0x') || trimmedValue.startsWith('0X')) {
            const matches = /^[0-9A-F]+$/i.exec(trimmedValue.slice(2));
            if (matches) {
                return Number.parseInt(matches[0], 16) * factor;
            }
        }
        else if (trimmedValue.startsWith('0b') || trimmedValue.startsWith('0B')) {
            const matches = /^[01]+$/.exec(trimmedValue.slice(2));
            if (matches) {
                return Number.parseInt(matches[0], 2) * factor;
            }
        }
        else {
            const matches = /^[0-9,]*([\.])?([0-9]+)?([Ee][+-]?[0-9]+)?$/.exec(trimmedValue);
            if (matches) {
                const matchedValue = matches[0].replace(/,/g, '');
                if (matches.length > 1) {
                    return Number.parseFloat(matchedValue) * factor;
                }
                else {
                    return Number.parseInt(matchedValue, 10) * factor;
                }
            }
        }
        if (strict) {
            throw new TypeError(`'${value}' does not represent a Number`);
        }
    }
    if (strict) {
        throw new TypeError(`'${typeof value} cannot be converted to a Number`);
    }
    return Number.NaN;
}
exports.toNumber = toNumber;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnVtYmVyLW1hcnNoYWxsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbWFyc2hhbGxlcnMvbnVtYmVyLW1hcnNoYWxsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFRQSxrQkFBeUIsS0FBVSxFQUFFLFNBQWtCLEtBQUs7SUFDeEQsSUFBSSxLQUFLLEtBQUssU0FBUyxFQUFFO1FBQ3JCLE9BQU8sU0FBUyxDQUFBO0tBQ25CO0lBR0QsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ3RCLElBQUksTUFBTSxFQUFFO1lBQ1IsTUFBTSxJQUFJLFNBQVMsQ0FBQyxJQUFJLEtBQUssZ0NBQWdDLENBQUMsQ0FBQTtTQUNqRTtRQUVELElBQUksS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDbEIsT0FBTyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFBO1NBQ3BDO2FBQU07WUFDSCxPQUFPLFNBQVMsQ0FBQTtTQUNuQjtLQUNKO0lBRUQsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7UUFDM0IsT0FBTyxLQUFLLENBQUE7S0FDZjtJQUVELElBQUksT0FBTyxLQUFLLEtBQUssU0FBUyxFQUFFO1FBQzVCLE9BQU8sS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUN2QjtTQUFNLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFO1FBQ2xDLElBQUksWUFBWSxHQUFHLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQTtRQUMvQixNQUFNLFdBQVcsR0FBRyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUE7UUFDdkQsSUFBSSxXQUFXLElBQUksV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRTtZQUN0QyxZQUFZLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUE7U0FDM0Q7UUFFRCxNQUFNLE1BQU0sR0FBRyxXQUFXLElBQUksV0FBVyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUU3RCxJQUFJLFlBQVksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksWUFBWSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNoRSxNQUFNLE9BQU8sR0FBRyxjQUFjLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUMxRCxJQUFJLE9BQU8sRUFBRTtnQkFFVCxPQUFPLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQTthQUNsRDtTQUNKO2FBQU0sSUFBSSxZQUFZLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLFlBQVksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDdkUsTUFBTSxPQUFPLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDckQsSUFBSSxPQUFPLEVBQUU7Z0JBRVQsT0FBTyxNQUFNLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUE7YUFDakQ7U0FDSjthQUFNO1lBQ0gsTUFBTSxPQUFPLEdBQUcsNkNBQTZDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFBO1lBQ2hGLElBQUksT0FBTyxFQUFFO2dCQUNULE1BQU0sWUFBWSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFBO2dCQUNqRCxJQUFJLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO29CQUNwQixPQUFPLE1BQU0sQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLEdBQUcsTUFBTSxDQUFBO2lCQUNsRDtxQkFBTTtvQkFFSCxPQUFPLE1BQU0sQ0FBQyxRQUFRLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQTtpQkFDcEQ7YUFDSjtTQUNKO1FBRUQsSUFBSSxNQUFNLEVBQUU7WUFDUixNQUFNLElBQUksU0FBUyxDQUFDLElBQUksS0FBSywrQkFBK0IsQ0FBQyxDQUFBO1NBQ2hFO0tBQ0o7SUFFRCxJQUFJLE1BQU0sRUFBRTtRQUNSLE1BQU0sSUFBSSxTQUFTLENBQUMsSUFBSSxPQUFPLEtBQUssa0NBQWtDLENBQUMsQ0FBQTtLQUMxRTtJQUVELE9BQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQTtBQUNyQixDQUFDO0FBcEVELDRCQW9FQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29udmVydHMgYSBKU09OIHZhbHVlIHRvIGEgTnVtYmVyLCBpZiBwb3NzaWJsZVxuICpcbiAqIEBwYXJhbSB2YWx1ZSAtIHZhbHVlIHRvIGNvbnZlcnQgdG8gYSBOdW1iZXJcbiAqIEBwYXJhbSBzdHJpY3QgLSB3aGVuIHRydWUsIHBhcnNpbmcgaXMgc3RyaWN0IGFuZCB0aHJvd3MgYSBUeXBlRXJyb3IgaWYgdGhlIHZhbHVlIGNhbm5vdCBiZSBjb252ZXJ0ZWRcbiAqXG4gKiBAcmV0dXJuIHBhcnNlZCBudW1iZXIsIE5hTiwgb3IgdW5kZWZpbmVkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b051bWJlcih2YWx1ZTogYW55LCBzdHJpY3Q6IGJvb2xlYW4gPSBmYWxzZSk6IG51bWJlciB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgIH1cblxuICAgIC8vIEV4dHJhY3QgMCBpbmRleCBvZiBhbiBhcnJheVxuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICBpZiAoc3RyaWN0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGAnJHt2YWx1ZX0nIGRvZXMgbm90IHJlcHJlc2VudCBhIEJvb2xlYW5gKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiB0b051bWJlcih2YWx1ZVswXSwgc3RyaWN0KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlXG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA/IDEgOiAwXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGxldCB0cmltbWVkVmFsdWUgPSB2YWx1ZS50cmltKClcbiAgICAgICAgY29uc3QgcHJlZml4TWF0Y2ggPSAvXihbLStdKT9bIFxcdF0qLy5leGVjKHRyaW1tZWRWYWx1ZSlcbiAgICAgICAgaWYgKHByZWZpeE1hdGNoICYmIHByZWZpeE1hdGNoWzBdLmxlbmd0aCkge1xuICAgICAgICAgICAgdHJpbW1lZFZhbHVlID0gdHJpbW1lZFZhbHVlLnNsaWNlKHByZWZpeE1hdGNoWzBdLmxlbmd0aClcbiAgICAgICAgfVxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZTpuby1tYWdpYy1udW1iZXJzXG4gICAgICAgIGNvbnN0IGZhY3RvciA9IHByZWZpeE1hdGNoICYmIHByZWZpeE1hdGNoWzFdID09PSAnLScgPyAtMSA6IDFcblxuICAgICAgICBpZiAodHJpbW1lZFZhbHVlLnN0YXJ0c1dpdGgoJzB4JykgfHwgdHJpbW1lZFZhbHVlLnN0YXJ0c1dpdGgoJzBYJykpIHtcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoZXMgPSAvXlswLTlBLUZdKyQvaS5leGVjKHRyaW1tZWRWYWx1ZS5zbGljZSgyKSlcbiAgICAgICAgICAgIGlmIChtYXRjaGVzKSB7XG4gICAgICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGU6bm8tbWFnaWMtbnVtYmVyc1xuICAgICAgICAgICAgICAgIHJldHVybiBOdW1iZXIucGFyc2VJbnQobWF0Y2hlc1swXSwgMTYpICogZmFjdG9yXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodHJpbW1lZFZhbHVlLnN0YXJ0c1dpdGgoJzBiJykgfHwgdHJpbW1lZFZhbHVlLnN0YXJ0c1dpdGgoJzBCJykpIHtcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoZXMgPSAvXlswMV0rJC8uZXhlYyh0cmltbWVkVmFsdWUuc2xpY2UoMikpXG4gICAgICAgICAgICBpZiAobWF0Y2hlcykge1xuICAgICAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlOm5vLW1hZ2ljLW51bWJlcnNcbiAgICAgICAgICAgICAgICByZXR1cm4gTnVtYmVyLnBhcnNlSW50KG1hdGNoZXNbMF0sIDIpICogZmFjdG9yXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBtYXRjaGVzID0gL15bMC05LF0qKFtcXC5dKT8oWzAtOV0rKT8oW0VlXVsrLV0/WzAtOV0rKT8kLy5leGVjKHRyaW1tZWRWYWx1ZSlcbiAgICAgICAgICAgIGlmIChtYXRjaGVzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWF0Y2hlZFZhbHVlID0gbWF0Y2hlc1swXS5yZXBsYWNlKC8sL2csICcnKVxuICAgICAgICAgICAgICAgIGlmIChtYXRjaGVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE51bWJlci5wYXJzZUZsb2F0KG1hdGNoZWRWYWx1ZSkgKiBmYWN0b3JcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZTpuby1tYWdpYy1udW1iZXJzXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBOdW1iZXIucGFyc2VJbnQobWF0Y2hlZFZhbHVlLCAxMCkgKiBmYWN0b3JcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RyaWN0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGAnJHt2YWx1ZX0nIGRvZXMgbm90IHJlcHJlc2VudCBhIE51bWJlcmApXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc3RyaWN0KSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYCcke3R5cGVvZiB2YWx1ZX0gY2Fubm90IGJlIGNvbnZlcnRlZCB0byBhIE51bWJlcmApXG4gICAgfVxuXG4gICAgcmV0dXJuIE51bWJlci5OYU5cbn1cbiJdfQ==