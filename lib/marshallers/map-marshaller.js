"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function toMap(value, itemMarshaller, strict) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        if (strict) {
            throw new TypeError('\'null\' cannot be converted to a Map');
        }
        return undefined;
    }
    const map = new Map();
    if (typeof value !== 'object') {
        if (strict) {
            throw new TypeError(`'${typeof value}' cannot be converted to a Map`);
        }
        if (itemMarshaller) {
            map.set(value, itemMarshaller(value, strict));
        }
        return map;
    }
    if (Array.isArray(value)) {
        if (itemMarshaller) {
            value.forEach((item, i) => map.set(i, itemMarshaller(value, strict)));
        }
        else {
            value.forEach((item, i) => map.set(i, value));
        }
        return map;
    }
    for (const propertyName of Reflect.ownKeys(value)) {
        const propertyValue = Reflect.get(value, propertyName);
        map.set(propertyName, itemMarshaller ? itemMarshaller(propertyValue, strict) : propertyValue);
    }
    return map;
}
exports.toMap = toMap;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwLW1hcnNoYWxsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbWFyc2hhbGxlcnMvbWFwLW1hcnNoYWxsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFTQSxlQUFzQixLQUFVLEVBQUUsY0FBc0QsRUFBRSxNQUFnQjtJQUN0RyxJQUFJLEtBQUssS0FBSyxTQUFTLEVBQUU7UUFDckIsT0FBTyxTQUFTLENBQUE7S0FDbkI7SUFDRCxJQUFJLEtBQUssS0FBSyxJQUFJLEVBQUU7UUFDaEIsSUFBSSxNQUFNLEVBQUU7WUFDUixNQUFNLElBQUksU0FBUyxDQUFDLHVDQUF1QyxDQUFDLENBQUE7U0FDL0Q7UUFFRCxPQUFPLFNBQVMsQ0FBQTtLQUNuQjtJQUVELE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUE7SUFDckIsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7UUFDM0IsSUFBSSxNQUFNLEVBQUU7WUFDUixNQUFNLElBQUksU0FBUyxDQUFDLElBQUksT0FBTyxLQUFLLGdDQUFnQyxDQUFDLENBQUE7U0FDeEU7UUFDRCxJQUFJLGNBQWMsRUFBRTtZQUNoQixHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxjQUFjLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUE7U0FDaEQ7UUFFRCxPQUFPLEdBQUcsQ0FBQTtLQUNiO0lBRUQsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ3RCLElBQUksY0FBYyxFQUFFO1lBQ2hCLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxjQUFjLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQTtTQUN4RTthQUFNO1lBQ0gsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUE7U0FDaEQ7UUFFRCxPQUFPLEdBQUcsQ0FBQTtLQUNiO0lBRUQsS0FBSyxNQUFNLFlBQVksSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQy9DLE1BQU0sYUFBYSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLFlBQVksQ0FBQyxDQUFBO1FBQ3RELEdBQUcsQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLGNBQWMsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLGFBQWEsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUE7S0FDaEc7SUFFRCxPQUFPLEdBQUcsQ0FBQTtBQUNkLENBQUM7QUF4Q0Qsc0JBd0NDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb252ZXJ0cyBhIEpTT04gdmFsdWUgdG8gYSBNYXAsIGlmIHBvc3NpYmxlLlxuICpcbiAqIEBwYXJhbSB2YWx1ZSAtIHZhbHVlIHRvIGNvbnZlcnQgdG8gYSBNYXBcbiAqIEBwYXJhbSBpdGVtTWFyc2hhbGxlciAtIGl0ZW0gbWFyc2hhbGxlciBmdW5jdGlvblxuICogQHBhcmFtIHN0cmljdCAtIHdoZW4gdHJ1ZSwgcGFyc2luZyBpcyBzdHJpY3QgYW5kIHRocm93cyBhIFR5cGVFcnJvciBpZiB0aGUgdmFsdWUgY2Fubm90IGJlIGNvbnZlcnRlZFxuICpcbiAqIEByZXR1cm5zIGEgbWFwLCBvZiB0aGUgdmFsdWUsIG9yIHRoZSB2YWx1ZSBpdHNlbGYuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b01hcCh2YWx1ZTogYW55LCBpdGVtTWFyc2hhbGxlcj86ICh2YWx1ZTogYW55LCBzdHJpY3Q/OiBib29sZWFuKSA9PiBhbnksIHN0cmljdD86IGJvb2xlYW4pOiBNYXA8c3RyaW5nLCBhbnk+IHwgdW5kZWZpbmVkIHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgfVxuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICBpZiAoc3RyaWN0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcXCdudWxsXFwnIGNhbm5vdCBiZSBjb252ZXJ0ZWQgdG8gYSBNYXAnKVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgIH1cblxuICAgIGNvbnN0IG1hcCA9IG5ldyBNYXAoKVxuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIGlmIChzdHJpY3QpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYCcke3R5cGVvZiB2YWx1ZX0nIGNhbm5vdCBiZSBjb252ZXJ0ZWQgdG8gYSBNYXBgKVxuICAgICAgICB9XG4gICAgICAgIGlmIChpdGVtTWFyc2hhbGxlcikge1xuICAgICAgICAgICAgbWFwLnNldCh2YWx1ZSwgaXRlbU1hcnNoYWxsZXIodmFsdWUsIHN0cmljdCkpXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbWFwXG4gICAgfVxuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIGlmIChpdGVtTWFyc2hhbGxlcikge1xuICAgICAgICAgICAgdmFsdWUuZm9yRWFjaCgoaXRlbSwgaSkgPT4gbWFwLnNldChpLCBpdGVtTWFyc2hhbGxlcih2YWx1ZSwgc3RyaWN0KSkpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YWx1ZS5mb3JFYWNoKChpdGVtLCBpKSA9PiBtYXAuc2V0KGksIHZhbHVlKSlcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtYXBcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IHByb3BlcnR5TmFtZSBvZiBSZWZsZWN0Lm93bktleXModmFsdWUpKSB7XG4gICAgICAgIGNvbnN0IHByb3BlcnR5VmFsdWUgPSBSZWZsZWN0LmdldCh2YWx1ZSwgcHJvcGVydHlOYW1lKVxuICAgICAgICBtYXAuc2V0KHByb3BlcnR5TmFtZSwgaXRlbU1hcnNoYWxsZXIgPyBpdGVtTWFyc2hhbGxlcihwcm9wZXJ0eVZhbHVlLCBzdHJpY3QpIDogcHJvcGVydHlWYWx1ZSlcbiAgICB9XG5cbiAgICByZXR1cm4gbWFwXG59XG4iXX0=