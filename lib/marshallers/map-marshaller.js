"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function toMap(value, itemMarshaller, strict) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        if (strict) {
            throw new TypeError('\'null\' cannot be converted to a Map');
        }
        return undefined;
    }
    const map = new Map();
    if (typeof value !== 'object') {
        if (strict) {
            throw new TypeError(`'${typeof value}' cannot be converted to a Map`);
        }
        if (itemMarshaller) {
            map.set(value, itemMarshaller(value, strict));
        }
        return map;
    }
    if (Array.isArray(value)) {
        if (itemMarshaller) {
            value.forEach((item, i) => map.set(i, itemMarshaller(value, strict)));
        }
        else {
            value.forEach((item, i) => map.set(i, value));
        }
        return map;
    }
    for (const propertyName of Reflect.ownKeys(value)) {
        const propertyValue = Reflect.get(value, propertyName);
        map.set(propertyName, itemMarshaller ? itemMarshaller(propertyValue, strict) : propertyValue);
    }
    return map;
}
exports.toMap = toMap;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwLW1hcnNoYWxsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbWFyc2hhbGxlcnMvbWFwLW1hcnNoYWxsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFTQSxTQUFnQixLQUFLLENBQUMsS0FBVSxFQUFFLGNBQXNELEVBQUUsTUFBZ0I7SUFDdEcsSUFBSSxLQUFLLEtBQUssU0FBUyxFQUFFO1FBQ3JCLE9BQU8sU0FBUyxDQUFBO0tBQ25CO0lBQ0QsSUFBSSxLQUFLLEtBQUssSUFBSSxFQUFFO1FBQ2hCLElBQUksTUFBTSxFQUFFO1lBQ1IsTUFBTSxJQUFJLFNBQVMsQ0FBQyx1Q0FBdUMsQ0FBQyxDQUFBO1NBQy9EO1FBRUQsT0FBTyxTQUFTLENBQUE7S0FDbkI7SUFFRCxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFBO0lBQ3JCLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFO1FBQzNCLElBQUksTUFBTSxFQUFFO1lBQ1IsTUFBTSxJQUFJLFNBQVMsQ0FBQyxJQUFJLE9BQU8sS0FBSyxnQ0FBZ0MsQ0FBQyxDQUFBO1NBQ3hFO1FBQ0QsSUFBSSxjQUFjLEVBQUU7WUFDaEIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsY0FBYyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFBO1NBQ2hEO1FBRUQsT0FBTyxHQUFHLENBQUE7S0FDYjtJQUVELElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUN0QixJQUFJLGNBQWMsRUFBRTtZQUNoQixLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsY0FBYyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUE7U0FDeEU7YUFBTTtZQUNILEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFBO1NBQ2hEO1FBRUQsT0FBTyxHQUFHLENBQUE7S0FDYjtJQUVELEtBQUssTUFBTSxZQUFZLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUMvQyxNQUFNLGFBQWEsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxZQUFZLENBQUMsQ0FBQTtRQUN0RCxHQUFHLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxjQUFjLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFBO0tBQ2hHO0lBRUQsT0FBTyxHQUFHLENBQUE7QUFDZCxDQUFDO0FBeENELHNCQXdDQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29udmVydHMgYSBKU09OIHZhbHVlIHRvIGEgTWFwLCBpZiBwb3NzaWJsZS5cbiAqXG4gKiBAcGFyYW0gdmFsdWUgLSB2YWx1ZSB0byBjb252ZXJ0IHRvIGEgTWFwXG4gKiBAcGFyYW0gaXRlbU1hcnNoYWxsZXIgLSBpdGVtIG1hcnNoYWxsZXIgZnVuY3Rpb25cbiAqIEBwYXJhbSBzdHJpY3QgLSB3aGVuIHRydWUsIHBhcnNpbmcgaXMgc3RyaWN0IGFuZCB0aHJvd3MgYSBUeXBlRXJyb3IgaWYgdGhlIHZhbHVlIGNhbm5vdCBiZSBjb252ZXJ0ZWRcbiAqXG4gKiBAcmV0dXJucyBhIG1hcCwgb2YgdGhlIHZhbHVlLCBvciB0aGUgdmFsdWUgaXRzZWxmLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9NYXAodmFsdWU6IGFueSwgaXRlbU1hcnNoYWxsZXI/OiAodmFsdWU6IGFueSwgc3RyaWN0PzogYm9vbGVhbikgPT4gYW55LCBzdHJpY3Q/OiBib29sZWFuKTogTWFwPHN0cmluZywgYW55PiB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgIH1cbiAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgaWYgKHN0cmljdCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXFwnbnVsbFxcJyBjYW5ub3QgYmUgY29udmVydGVkIHRvIGEgTWFwJylcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICB9XG5cbiAgICBjb25zdCBtYXAgPSBuZXcgTWFwKClcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBpZiAoc3RyaWN0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGAnJHt0eXBlb2YgdmFsdWV9JyBjYW5ub3QgYmUgY29udmVydGVkIHRvIGEgTWFwYClcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXRlbU1hcnNoYWxsZXIpIHtcbiAgICAgICAgICAgIG1hcC5zZXQodmFsdWUsIGl0ZW1NYXJzaGFsbGVyKHZhbHVlLCBzdHJpY3QpKVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1hcFxuICAgIH1cblxuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICBpZiAoaXRlbU1hcnNoYWxsZXIpIHtcbiAgICAgICAgICAgIHZhbHVlLmZvckVhY2goKGl0ZW0sIGkpID0+IG1hcC5zZXQoaSwgaXRlbU1hcnNoYWxsZXIodmFsdWUsIHN0cmljdCkpKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFsdWUuZm9yRWFjaCgoaXRlbSwgaSkgPT4gbWFwLnNldChpLCB2YWx1ZSkpXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbWFwXG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBwcm9wZXJ0eU5hbWUgb2YgUmVmbGVjdC5vd25LZXlzKHZhbHVlKSkge1xuICAgICAgICBjb25zdCBwcm9wZXJ0eVZhbHVlID0gUmVmbGVjdC5nZXQodmFsdWUsIHByb3BlcnR5TmFtZSlcbiAgICAgICAgbWFwLnNldChwcm9wZXJ0eU5hbWUsIGl0ZW1NYXJzaGFsbGVyID8gaXRlbU1hcnNoYWxsZXIocHJvcGVydHlWYWx1ZSwgc3RyaWN0KSA6IHByb3BlcnR5VmFsdWUpXG4gICAgfVxuXG4gICAgcmV0dXJuIG1hcFxufVxuIl19