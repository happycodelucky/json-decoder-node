"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toMap = void 0;
function toMap(value, itemMarshaller, strict) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        if (strict) {
            throw new TypeError('\'null\' cannot be converted to a Map');
        }
        return undefined;
    }
    const map = new Map();
    if (typeof value !== 'object') {
        if (strict) {
            throw new TypeError(`'${typeof value}' cannot be converted to a Map`);
        }
        if (itemMarshaller) {
            map.set(value, itemMarshaller(value, strict));
        }
        return map;
    }
    if (Array.isArray(value)) {
        if (itemMarshaller) {
            value.forEach((item, i) => map.set(i, itemMarshaller(value, strict)));
        }
        else {
            value.forEach((item, i) => map.set(i, value));
        }
        return map;
    }
    for (const propertyName of Reflect.ownKeys(value)) {
        const propertyValue = Reflect.get(value, propertyName);
        map.set(propertyName, itemMarshaller ? itemMarshaller(propertyValue, strict) : propertyValue);
    }
    return map;
}
exports.toMap = toMap;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwLW1hcnNoYWxsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbWFyc2hhbGxlcnMvbWFwLW1hcnNoYWxsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBU0EsU0FBZ0IsS0FBSyxDQUFDLEtBQVUsRUFBRSxjQUFzRCxFQUFFLE1BQWdCO0lBQ3RHLElBQUksS0FBSyxLQUFLLFNBQVMsRUFBRTtRQUNyQixPQUFPLFNBQVMsQ0FBQTtLQUNuQjtJQUNELElBQUksS0FBSyxLQUFLLElBQUksRUFBRTtRQUNoQixJQUFJLE1BQU0sRUFBRTtZQUNSLE1BQU0sSUFBSSxTQUFTLENBQUMsdUNBQXVDLENBQUMsQ0FBQTtTQUMvRDtRQUVELE9BQU8sU0FBUyxDQUFBO0tBQ25CO0lBRUQsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQTtJQUNyQixJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtRQUMzQixJQUFJLE1BQU0sRUFBRTtZQUNSLE1BQU0sSUFBSSxTQUFTLENBQUMsSUFBSSxPQUFPLEtBQUssZ0NBQWdDLENBQUMsQ0FBQTtTQUN4RTtRQUNELElBQUksY0FBYyxFQUFFO1lBQ2hCLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLGNBQWMsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQTtTQUNoRDtRQUVELE9BQU8sR0FBRyxDQUFBO0tBQ2I7SUFFRCxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDdEIsSUFBSSxjQUFjLEVBQUU7WUFDaEIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLGNBQWMsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFBO1NBQ3hFO2FBQU07WUFDSCxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQTtTQUNoRDtRQUVELE9BQU8sR0FBRyxDQUFBO0tBQ2I7SUFFRCxLQUFLLE1BQU0sWUFBWSxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDL0MsTUFBTSxhQUFhLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsWUFBWSxDQUFDLENBQUE7UUFDdEQsR0FBRyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsY0FBYyxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsYUFBYSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQTtLQUNoRztJQUVELE9BQU8sR0FBRyxDQUFBO0FBQ2QsQ0FBQztBQXhDRCxzQkF3Q0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvbnZlcnRzIGEgSlNPTiB2YWx1ZSB0byBhIE1hcCwgaWYgcG9zc2libGUuXG4gKlxuICogQHBhcmFtIHZhbHVlIC0gdmFsdWUgdG8gY29udmVydCB0byBhIE1hcFxuICogQHBhcmFtIGl0ZW1NYXJzaGFsbGVyIC0gaXRlbSBtYXJzaGFsbGVyIGZ1bmN0aW9uXG4gKiBAcGFyYW0gc3RyaWN0IC0gd2hlbiB0cnVlLCBwYXJzaW5nIGlzIHN0cmljdCBhbmQgdGhyb3dzIGEgVHlwZUVycm9yIGlmIHRoZSB2YWx1ZSBjYW5ub3QgYmUgY29udmVydGVkXG4gKlxuICogQHJldHVybnMgYSBtYXAsIG9mIHRoZSB2YWx1ZSwgb3IgdGhlIHZhbHVlIGl0c2VsZi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvTWFwKHZhbHVlOiBhbnksIGl0ZW1NYXJzaGFsbGVyPzogKHZhbHVlOiBhbnksIHN0cmljdD86IGJvb2xlYW4pID0+IGFueSwgc3RyaWN0PzogYm9vbGVhbik6IE1hcDxzdHJpbmcsIGFueT4gfCB1bmRlZmluZWQge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICB9XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgIGlmIChzdHJpY3QpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1xcJ251bGxcXCcgY2Fubm90IGJlIGNvbnZlcnRlZCB0byBhIE1hcCcpXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgfVxuXG4gICAgY29uc3QgbWFwID0gbmV3IE1hcCgpXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgaWYgKHN0cmljdCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgJyR7dHlwZW9mIHZhbHVlfScgY2Fubm90IGJlIGNvbnZlcnRlZCB0byBhIE1hcGApXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGl0ZW1NYXJzaGFsbGVyKSB7XG4gICAgICAgICAgICBtYXAuc2V0KHZhbHVlLCBpdGVtTWFyc2hhbGxlcih2YWx1ZSwgc3RyaWN0KSlcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtYXBcbiAgICB9XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgaWYgKGl0ZW1NYXJzaGFsbGVyKSB7XG4gICAgICAgICAgICB2YWx1ZS5mb3JFYWNoKChpdGVtLCBpKSA9PiBtYXAuc2V0KGksIGl0ZW1NYXJzaGFsbGVyKHZhbHVlLCBzdHJpY3QpKSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhbHVlLmZvckVhY2goKGl0ZW0sIGkpID0+IG1hcC5zZXQoaSwgdmFsdWUpKVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1hcFxuICAgIH1cblxuICAgIGZvciAoY29uc3QgcHJvcGVydHlOYW1lIG9mIFJlZmxlY3Qub3duS2V5cyh2YWx1ZSkpIHtcbiAgICAgICAgY29uc3QgcHJvcGVydHlWYWx1ZSA9IFJlZmxlY3QuZ2V0KHZhbHVlLCBwcm9wZXJ0eU5hbWUpXG4gICAgICAgIG1hcC5zZXQocHJvcGVydHlOYW1lLCBpdGVtTWFyc2hhbGxlciA/IGl0ZW1NYXJzaGFsbGVyKHByb3BlcnR5VmFsdWUsIHN0cmljdCkgOiBwcm9wZXJ0eVZhbHVlKVxuICAgIH1cblxuICAgIHJldHVybiBtYXBcbn1cbiJdfQ==