"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toBoolean = void 0;
function toBoolean(value, strict = false) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return false;
    }
    if (Array.isArray(value)) {
        if (strict) {
            throw new TypeError(`'${value}' does not represent a Boolean`);
        }
        if (value.length > 0) {
            value = toBoolean(value[0], strict);
        }
        else {
            return undefined;
        }
    }
    if (typeof value === 'boolean') {
        return value;
    }
    if (typeof value === 'string') {
        if (/^[ \t]*(true|yes|1)[ \t]*$/i.test(value)) {
            return true;
        }
        if (/^[ \t]*(false|no|0)[ \t]*$/i.test(value)) {
            return false;
        }
        if (strict) {
            throw new TypeError(`'${value}' does not represent a Boolean`);
        }
        return undefined;
    }
    else if (typeof value === 'number') {
        if (!strict) {
            return value !== 0;
        }
        if (value === 0) {
            return false;
        }
        else if (value === 1) {
            return true;
        }
        throw new TypeError(`'${value}' does not represent a Boolean`);
    }
    if (strict) {
        throw new TypeError(`'${typeof value}' cannot be converted to a Boolean`);
    }
    return undefined;
}
exports.toBoolean = toBoolean;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9vbGVhbi1tYXJzaGFsbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21hcnNoYWxsZXJzL2Jvb2xlYW4tbWFyc2hhbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFRQSxTQUFnQixTQUFTLENBQUMsS0FBVSxFQUFFLFNBQWtCLEtBQUs7SUFDekQsSUFBSSxLQUFLLEtBQUssU0FBUyxFQUFFO1FBQ3JCLE9BQU8sU0FBUyxDQUFBO0tBQ25CO0lBRUQsSUFBSSxLQUFLLEtBQUssSUFBSSxFQUFFO1FBQ2hCLE9BQU8sS0FBSyxDQUFBO0tBQ2Y7SUFHRCxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDdEIsSUFBSSxNQUFNLEVBQUU7WUFDUixNQUFNLElBQUksU0FBUyxDQUFDLElBQUksS0FBSyxnQ0FBZ0MsQ0FBQyxDQUFBO1NBQ2pFO1FBRUQsSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNsQixLQUFLLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQTtTQUN0QzthQUFNO1lBQ0gsT0FBTyxTQUFTLENBQUE7U0FDbkI7S0FDSjtJQUVELElBQUksT0FBTyxLQUFLLEtBQUssU0FBUyxFQUFFO1FBQzVCLE9BQU8sS0FBSyxDQUFBO0tBQ2Y7SUFFRCxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtRQUMzQixJQUFJLDZCQUE2QixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUMzQyxPQUFPLElBQUksQ0FBQTtTQUNkO1FBRUQsSUFBSSw2QkFBNkIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDM0MsT0FBTyxLQUFLLENBQUE7U0FDZjtRQUVELElBQUksTUFBTSxFQUFFO1lBQ1IsTUFBTSxJQUFJLFNBQVMsQ0FBQyxJQUFJLEtBQUssZ0NBQWdDLENBQUMsQ0FBQTtTQUNqRTtRQUVELE9BQU8sU0FBUyxDQUFBO0tBQ25CO1NBQU0sSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7UUFDbEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNULE9BQU8sS0FBSyxLQUFLLENBQUMsQ0FBQTtTQUNyQjtRQUVELElBQUksS0FBSyxLQUFLLENBQUMsRUFBRTtZQUNiLE9BQU8sS0FBSyxDQUFBO1NBQ2Y7YUFBTSxJQUFJLEtBQUssS0FBSyxDQUFDLEVBQUU7WUFDcEIsT0FBTyxJQUFJLENBQUE7U0FDZDtRQUVELE1BQU0sSUFBSSxTQUFTLENBQUMsSUFBSSxLQUFLLGdDQUFnQyxDQUFDLENBQUE7S0FDakU7SUFFRCxJQUFJLE1BQU0sRUFBRTtRQUNSLE1BQU0sSUFBSSxTQUFTLENBQUMsSUFBSSxPQUFPLEtBQUssb0NBQW9DLENBQUMsQ0FBQTtLQUM1RTtJQUVELE9BQU8sU0FBUyxDQUFBO0FBQ3BCLENBQUM7QUEzREQsOEJBMkRDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb252ZXJ0cyBhIEpTT04gdmFsdWUgdG8gYSBCb29sZWFuLCBpZiBwb3NzaWJsZS5cbiAqXG4gKiBAcGFyYW0gdmFsdWUgLSB2YWx1ZSB0byBjb252ZXJ0IHRvIGEgQm9vbGVhblxuICogQHBhcmFtIHN0cmljdCAtIHdoZW4gdHJ1ZSwgcGFyc2luZyBpcyBzdHJpY3QgYW5kIHJldHVybnMgdW5kZWZpbmVkIGlmIG5vdCBhYmxlIHRvIGJlIHBhcnNlZFxuICpcbiAqIEByZXR1cm4gcGFyc2VkIEJvb2xlYW4gb3IgdW5kZWZpbmVkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b0Jvb2xlYW4odmFsdWU6IGFueSwgc3RyaWN0OiBib29sZWFuID0gZmFsc2UpOiBib29sZWFuIHwgdW5kZWZpbmVkIHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgfVxuXG4gICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIC8vIEV4dHJhY3QgMCBpbmRleCBvZiBhbiBhcnJheVxuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICBpZiAoc3RyaWN0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGAnJHt2YWx1ZX0nIGRvZXMgbm90IHJlcHJlc2VudCBhIEJvb2xlYW5gKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHZhbHVlID0gdG9Cb29sZWFuKHZhbHVlWzBdLCBzdHJpY3QpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlXG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKC9eWyBcXHRdKih0cnVlfHllc3wxKVsgXFx0XSokL2kudGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH1cbiAgICAgICAgLy8gU3RyaWN0IHJlcXVpcmVzIGV4YWN0IG1hdGNoIHRvIGZhbHNlXG4gICAgICAgIGlmICgvXlsgXFx0XSooZmFsc2V8bm98MClbIFxcdF0qJC9pLnRlc3QodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdHJpY3QpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYCcke3ZhbHVlfScgZG9lcyBub3QgcmVwcmVzZW50IGEgQm9vbGVhbmApXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGlmICghc3RyaWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUgIT09IDBcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWx1ZSA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT09IDEpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGAnJHt2YWx1ZX0nIGRvZXMgbm90IHJlcHJlc2VudCBhIEJvb2xlYW5gKVxuICAgIH1cblxuICAgIGlmIChzdHJpY3QpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgJyR7dHlwZW9mIHZhbHVlfScgY2Fubm90IGJlIGNvbnZlcnRlZCB0byBhIEJvb2xlYW5gKVxuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWRcbn1cbiJdfQ==