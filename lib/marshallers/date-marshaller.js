"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toDate = void 0;
function toDate(value, strict = false) {
    if (value === undefined) {
        return undefined;
    }
    if (Array.isArray(value)) {
        if (strict) {
            throw new TypeError(`'${value}' does not represent a Boolean`);
        }
        if (value.length > 0) {
            return toDate(value[0], strict);
        }
        else {
            return undefined;
        }
    }
    if (typeof value === 'string') {
        if (/^[\\d]+$/) {
            value = Number.parseInt(value, 10);
        }
        else {
            const timestamp = Date.parse(value);
            if (Number.isNaN(timestamp)) {
                if (strict) {
                    throw new TypeError(`'${value}' is not a valid URL`);
                }
                return undefined;
            }
            return new Date(timestamp);
        }
    }
    if (typeof value === 'number') {
        if (Number.isNaN(value) || value < 0) {
            if (strict) {
                throw new TypeError(`'${value}' is not a valid date`);
            }
            return undefined;
        }
        return new Date(value);
    }
    if (strict) {
        throw new TypeError(`'${value}' is not a valid date`);
    }
    return undefined;
}
exports.toDate = toDate;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1tYXJzaGFsbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21hcnNoYWxsZXJzL2RhdGUtbWFyc2hhbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFRQSxTQUFnQixNQUFNLENBQUMsS0FBVSxFQUFFLFNBQWtCLEtBQUs7SUFDdEQsSUFBSSxLQUFLLEtBQUssU0FBUyxFQUFFO1FBQ3JCLE9BQU8sU0FBUyxDQUFBO0tBQ25CO0lBR0QsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ3RCLElBQUksTUFBTSxFQUFFO1lBQ1IsTUFBTSxJQUFJLFNBQVMsQ0FBQyxJQUFJLEtBQUssZ0NBQWdDLENBQUMsQ0FBQTtTQUNqRTtRQUVELElBQUksS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDbEIsT0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFBO1NBQ2xDO2FBQU07WUFDSCxPQUFPLFNBQVMsQ0FBQTtTQUNuQjtLQUNKO0lBRUQsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7UUFDM0IsSUFBSSxVQUFVLEVBQUU7WUFDWixLQUFLLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUE7U0FDckM7YUFBTTtZQUNILE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUE7WUFDbkMsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUFFO2dCQUN6QixJQUFJLE1BQU0sRUFBRTtvQkFDUixNQUFNLElBQUksU0FBUyxDQUFDLElBQUksS0FBSyxzQkFBc0IsQ0FBQyxDQUFBO2lCQUN2RDtnQkFFRCxPQUFPLFNBQVMsQ0FBQTthQUNuQjtZQUVELE9BQU8sSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUE7U0FDN0I7S0FDSjtJQUVELElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFO1FBQzNCLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFO1lBQ2xDLElBQUksTUFBTSxFQUFFO2dCQUNSLE1BQU0sSUFBSSxTQUFTLENBQUMsSUFBSSxLQUFLLHVCQUF1QixDQUFDLENBQUE7YUFDeEQ7WUFFRCxPQUFPLFNBQVMsQ0FBQTtTQUNuQjtRQUVELE9BQU8sSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUE7S0FDekI7SUFFRCxJQUFJLE1BQU0sRUFBRTtRQUNSLE1BQU0sSUFBSSxTQUFTLENBQUMsSUFBSSxLQUFLLHVCQUF1QixDQUFDLENBQUE7S0FDeEQ7SUFFRCxPQUFPLFNBQVMsQ0FBQTtBQUNwQixDQUFDO0FBcERELHdCQW9EQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29udmVydHMgYSBKU09OIHZhbHVlIHRvIGEgRGF0ZSwgaWYgcG9zc2libGUuXG4gKlxuICogQHBhcmFtIHZhbHVlIC0gYSB2YWx1ZSB0byBjb252ZXJ0IHRvIGFuIFVSTFxuICogQHBhcmFtIHN0cmljdCAtIHdoZW4gdHJ1ZSwgcGFyc2luZyBpcyBzdHJpY3QgYW5kIHRocm93cyBhIFR5cGVFcnJvciBpZiB0aGUgdmFsdWUgY2Fubm90IGJlIGNvbnZlcnRlZFxuICpcbiAqIEByZXR1cm4gQSBEYXRlLCBvciB1bmRlZmluZWQgaWYgdGhlIHZhbHVlIGNvdWxkIG5vdCBiZSBjb252ZXJ0ZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvRGF0ZSh2YWx1ZTogYW55LCBzdHJpY3Q6IGJvb2xlYW4gPSBmYWxzZSk6IERhdGUgfCB1bmRlZmluZWQge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICB9XG5cbiAgICAvLyBFeHRyYWN0IDAgaW5kZXggb2YgYW4gYXJyYXlcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgaWYgKHN0cmljdCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgJyR7dmFsdWV9JyBkb2VzIG5vdCByZXByZXNlbnQgYSBCb29sZWFuYClcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdG9EYXRlKHZhbHVlWzBdLCBzdHJpY3QpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAoL15bXFxcXGRdKyQvKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IE51bWJlci5wYXJzZUludCh2YWx1ZSwgMTApXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSBEYXRlLnBhcnNlKHZhbHVlKVxuICAgICAgICAgICAgaWYgKE51bWJlci5pc05hTih0aW1lc3RhbXApKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN0cmljdCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGAnJHt2YWx1ZX0nIGlzIG5vdCBhIHZhbGlkIFVSTGApXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbmV3IERhdGUodGltZXN0YW1wKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgaWYgKE51bWJlci5pc05hTih2YWx1ZSkgfHwgdmFsdWUgPCAwKSB7XG4gICAgICAgICAgICBpZiAoc3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgJyR7dmFsdWV9JyBpcyBub3QgYSB2YWxpZCBkYXRlYClcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHZhbHVlKVxuICAgIH1cblxuICAgIGlmIChzdHJpY3QpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgJyR7dmFsdWV9JyBpcyBub3QgYSB2YWxpZCBkYXRlYClcbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkXG59XG4iXX0=