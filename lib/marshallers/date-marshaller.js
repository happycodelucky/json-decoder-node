"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function toDate(value, strict = false) {
    if (value === undefined) {
        return undefined;
    }
    if (Array.isArray(value)) {
        if (strict) {
            throw new TypeError(`'${value}' does not represent a Boolean`);
        }
        if (value.length > 0) {
            return toDate(value[0], strict);
        }
        else {
            return undefined;
        }
    }
    if (typeof value === 'string') {
        if (/^[\\d]+$/) {
            value = Number.parseInt(value, 10);
        }
        else {
            const timestamp = Date.parse(value);
            if (Number.isNaN(timestamp)) {
                if (strict) {
                    throw new TypeError(`'${value}' is not a valid URL`);
                }
                return undefined;
            }
            return new Date(timestamp);
        }
    }
    if (typeof value === 'number') {
        if (Number.isNaN(value) || value < 0) {
            if (strict) {
                throw new TypeError(`'${value}' is not a valid URL`);
            }
            return undefined;
        }
        return new Date(value);
    }
    if (strict) {
        throw new TypeError(`'${value}' is not a valid URL`);
    }
    return undefined;
}
exports.toDate = toDate;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1tYXJzaGFsbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21hcnNoYWxsZXJzL2RhdGUtbWFyc2hhbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQVFBLGdCQUF1QixLQUFVLEVBQUUsU0FBa0IsS0FBSztJQUN0RCxJQUFJLEtBQUssS0FBSyxTQUFTLEVBQUU7UUFDckIsT0FBTyxTQUFTLENBQUE7S0FDbkI7SUFHRCxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDdEIsSUFBSSxNQUFNLEVBQUU7WUFDUixNQUFNLElBQUksU0FBUyxDQUFDLElBQUksS0FBSyxnQ0FBZ0MsQ0FBQyxDQUFBO1NBQ2pFO1FBRUQsSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNsQixPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUE7U0FDbEM7YUFBTTtZQUNILE9BQU8sU0FBUyxDQUFBO1NBQ25CO0tBQ0o7SUFFRCxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtRQUMzQixJQUFJLFVBQVUsRUFBRTtZQUNaLEtBQUssR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQTtTQUNyQzthQUFNO1lBQ0gsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQTtZQUNuQyxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEVBQUU7Z0JBQ3pCLElBQUksTUFBTSxFQUFFO29CQUNSLE1BQU0sSUFBSSxTQUFTLENBQUMsSUFBSSxLQUFLLHNCQUFzQixDQUFDLENBQUE7aUJBQ3ZEO2dCQUVELE9BQU8sU0FBUyxDQUFBO2FBQ25CO1lBRUQsT0FBTyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQTtTQUM3QjtLQUNKO0lBRUQsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7UUFDM0IsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUU7WUFDbEMsSUFBSSxNQUFNLEVBQUU7Z0JBQ1IsTUFBTSxJQUFJLFNBQVMsQ0FBQyxJQUFJLEtBQUssc0JBQXNCLENBQUMsQ0FBQTthQUN2RDtZQUVELE9BQU8sU0FBUyxDQUFBO1NBQ25CO1FBRUQsT0FBTyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQTtLQUN6QjtJQUVELElBQUksTUFBTSxFQUFFO1FBQ1IsTUFBTSxJQUFJLFNBQVMsQ0FBQyxJQUFJLEtBQUssc0JBQXNCLENBQUMsQ0FBQTtLQUN2RDtJQUVELE9BQU8sU0FBUyxDQUFBO0FBQ3BCLENBQUM7QUFwREQsd0JBb0RDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb252ZXJ0cyBhIEpTT04gdmFsdWUgdG8gYSBEYXRlLCBpZiBwb3NzaWJsZS5cbiAqXG4gKiBAcGFyYW0gdmFsdWUgLSBhIHZhbHVlIHRvIGNvbnZlcnQgdG8gYW4gVVJMXG4gKiBAcGFyYW0gc3RyaWN0IC0gd2hlbiB0cnVlLCBwYXJzaW5nIGlzIHN0cmljdCBhbmQgdGhyb3dzIGEgVHlwZUVycm9yIGlmIHRoZSB2YWx1ZSBjYW5ub3QgYmUgY29udmVydGVkXG4gKlxuICogQHJldHVybiBBIERhdGUsIG9yIHVuZGVmaW5lZCBpZiB0aGUgdmFsdWUgY291bGQgbm90IGJlIGNvbnZlcnRlZFxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9EYXRlKHZhbHVlOiBhbnksIHN0cmljdDogYm9vbGVhbiA9IGZhbHNlKTogRGF0ZSB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgIH1cblxuICAgIC8vIEV4dHJhY3QgMCBpbmRleCBvZiBhbiBhcnJheVxuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICBpZiAoc3RyaWN0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGAnJHt2YWx1ZX0nIGRvZXMgbm90IHJlcHJlc2VudCBhIEJvb2xlYW5gKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiB0b0RhdGUodmFsdWVbMF0sIHN0cmljdClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICgvXltcXFxcZF0rJC8pIHtcbiAgICAgICAgICAgIHZhbHVlID0gTnVtYmVyLnBhcnNlSW50KHZhbHVlLCAxMClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHRpbWVzdGFtcCA9IERhdGUucGFyc2UodmFsdWUpXG4gICAgICAgICAgICBpZiAoTnVtYmVyLmlzTmFOKHRpbWVzdGFtcCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoc3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYCcke3ZhbHVlfScgaXMgbm90IGEgdmFsaWQgVVJMYClcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZSh0aW1lc3RhbXApXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgICBpZiAoTnVtYmVyLmlzTmFOKHZhbHVlKSB8fCB2YWx1ZSA8IDApIHtcbiAgICAgICAgICAgIGlmIChzdHJpY3QpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGAnJHt2YWx1ZX0nIGlzIG5vdCBhIHZhbGlkIFVSTGApXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXcgRGF0ZSh2YWx1ZSlcbiAgICB9XG5cbiAgICBpZiAoc3RyaWN0KSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYCcke3ZhbHVlfScgaXMgbm90IGEgdmFsaWQgVVJMYClcbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkXG59XG4iXX0=