"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const url_1 = require("url");
const array_marshaller_1 = require("./array-marshaller");
const boolean_marshaller_1 = require("./boolean-marshaller");
const date_marshaller_1 = require("./date-marshaller");
const map_marshaller_1 = require("./map-marshaller");
const number_marshaller_1 = require("./number-marshaller");
const object_marshaller_1 = require("./object-marshaller");
const set_marshaller_1 = require("./set-marshaller");
const string_marshaller_1 = require("./string-marshaller");
const url_marshaller_1 = require("./url-marshaller");
const marshallers = new Map();
marshallers.set(Boolean, boolean_marshaller_1.toBoolean);
marshallers.set(Date, date_marshaller_1.toDate);
marshallers.set(Number, number_marshaller_1.toNumber);
marshallers.set(Object, object_marshaller_1.toObject);
marshallers.set(String, string_marshaller_1.toString);
marshallers.set(url_1.URL, url_marshaller_1.toURL);
const collectionMarshallers = new Map();
collectionMarshallers.set(Array, array_marshaller_1.toArray);
collectionMarshallers.set(Map, map_marshaller_1.toMap);
collectionMarshallers.set(Set, set_marshaller_1.toSet);
collectionMarshallers.forEach((marshaller, key) => {
    marshallers.set(key, convertCollectionMarshallerToMarshaller(marshaller));
});
function marshallerForType(type) {
    return marshallers.get(type);
}
exports.marshallerForType = marshallerForType;
function collectionMarshallerForType(type) {
    return collectionMarshallers.get(type);
}
exports.collectionMarshallerForType = collectionMarshallerForType;
function convertCollectionMarshallerToMarshaller(marshaller) {
    return (value, strict) => {
        return marshaller(value, (item) => item, strict);
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFyc2hhbGxlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbWFyc2hhbGxlcnMvbWFyc2hhbGxlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFJQSw2QkFBeUI7QUFHekIseURBQTRDO0FBQzVDLDZEQUFnRDtBQUNoRCx1REFBMEM7QUFDMUMscURBQXdDO0FBQ3hDLDJEQUE4QztBQUM5QywyREFBOEM7QUFDOUMscURBQXdDO0FBQ3hDLDJEQUE4QztBQUM5QyxxREFBd0M7QUFHeEMsTUFBTSxXQUFXLEdBQUcsSUFBSSxHQUFHLEVBQStDLENBQUE7QUFDMUUsV0FBVyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsOEJBQVMsQ0FBQyxDQUFBO0FBQ25DLFdBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLHdCQUFNLENBQUMsQ0FBQTtBQUM3QixXQUFXLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSw0QkFBUSxDQUFDLENBQUE7QUFDakMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsNEJBQVEsQ0FBQyxDQUFBO0FBQ2pDLFdBQVcsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLDRCQUFRLENBQUMsQ0FBQTtBQUNqQyxXQUFXLENBQUMsR0FBRyxDQUFDLFNBQUcsRUFBRSxzQkFBSyxDQUFDLENBQUE7QUFHM0IsTUFBTSxxQkFBcUIsR0FBRyxJQUFJLEdBQUcsRUFBeUQsQ0FBQTtBQUM5RixxQkFBcUIsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLDBCQUFPLENBQUMsQ0FBQTtBQUN6QyxxQkFBcUIsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLHNCQUFLLENBQUMsQ0FBQTtBQUNyQyxxQkFBcUIsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLHNCQUFLLENBQUMsQ0FBQTtBQUdyQyxxQkFBcUIsQ0FBQyxPQUFPLENBQUMsQ0FBQyxVQUF3QyxFQUFFLEdBQTRCLEVBQUUsRUFBRTtJQUNyRyxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSx1Q0FBdUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFBO0FBQzdFLENBQUMsQ0FBQyxDQUFBO0FBZUYsU0FBZ0IsaUJBQWlCLENBQUMsSUFBNkI7SUFDM0QsT0FBTyxXQUFXLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFBO0FBQ2hDLENBQUM7QUFGRCw4Q0FFQztBQWVELFNBQWdCLDJCQUEyQixDQUFDLElBQTZCO0lBQ3JFLE9BQU8scUJBQXFCLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFBO0FBQzFDLENBQUM7QUFGRCxrRUFFQztBQVFELFNBQVMsdUNBQXVDLENBQUMsVUFBd0M7SUFDckYsT0FBTyxDQUFDLEtBQVUsRUFBRSxNQUFnQixFQUFPLEVBQUU7UUFDekMsT0FBTyxVQUFVLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUE7SUFDcEQsQ0FBQyxDQUFBO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUmVnaXN0ZXJ5IG9mIHR5cGVzIHRvIGFzc29jaWF0ZWQgbWFyc2hhbGxlcnNcbiAqL1xuXG5pbXBvcnQgeyBVUkwgfSBmcm9tICd1cmwnXG5cbmltcG9ydCB7IERlY29kZXJQcm90b3R5cGFsVGFyZ2V0IH0gZnJvbSAnLi4vZGVjb2Rlci9kZWNvZGVyLWRlY2xhcmF0aW9ucydcbmltcG9ydCB7IHRvQXJyYXkgfSBmcm9tICcuL2FycmF5LW1hcnNoYWxsZXInXG5pbXBvcnQgeyB0b0Jvb2xlYW4gfSBmcm9tICcuL2Jvb2xlYW4tbWFyc2hhbGxlcidcbmltcG9ydCB7IHRvRGF0ZSB9IGZyb20gJy4vZGF0ZS1tYXJzaGFsbGVyJ1xuaW1wb3J0IHsgdG9NYXAgfSBmcm9tICcuL21hcC1tYXJzaGFsbGVyJ1xuaW1wb3J0IHsgdG9OdW1iZXIgfSBmcm9tICcuL251bWJlci1tYXJzaGFsbGVyJ1xuaW1wb3J0IHsgdG9PYmplY3QgfSBmcm9tICcuL29iamVjdC1tYXJzaGFsbGVyJ1xuaW1wb3J0IHsgdG9TZXQgfSBmcm9tICcuL3NldC1tYXJzaGFsbGVyJ1xuaW1wb3J0IHsgdG9TdHJpbmcgfSBmcm9tICcuL3N0cmluZy1tYXJzaGFsbGVyJ1xuaW1wb3J0IHsgdG9VUkwgfSBmcm9tICcuL3VybC1tYXJzaGFsbGVyJ1xuXG4vLyBNYXJzaGFsbGVyIGZ1bmN0aW9uIG1hcFxuY29uc3QgbWFyc2hhbGxlcnMgPSBuZXcgTWFwPERlY29kZXJQcm90b3R5cGFsVGFyZ2V0LCBNYXJzaGFsbGVyRnVuY3Rpb24+KClcbm1hcnNoYWxsZXJzLnNldChCb29sZWFuLCB0b0Jvb2xlYW4pXG5tYXJzaGFsbGVycy5zZXQoRGF0ZSwgdG9EYXRlKVxubWFyc2hhbGxlcnMuc2V0KE51bWJlciwgdG9OdW1iZXIpXG5tYXJzaGFsbGVycy5zZXQoT2JqZWN0LCB0b09iamVjdClcbm1hcnNoYWxsZXJzLnNldChTdHJpbmcsIHRvU3RyaW5nKVxubWFyc2hhbGxlcnMuc2V0KFVSTCwgdG9VUkwpXG5cbi8vIENvbGxlY3Rpb24gbWFyc2hhbGxlciBmdW5jdGlvbiBtYXBcbmNvbnN0IGNvbGxlY3Rpb25NYXJzaGFsbGVycyA9IG5ldyBNYXA8RGVjb2RlclByb3RvdHlwYWxUYXJnZXQsIENvbGxlY3Rpb25NYXJzaGFsbGVyRnVuY3Rpb24+KClcbmNvbGxlY3Rpb25NYXJzaGFsbGVycy5zZXQoQXJyYXksIHRvQXJyYXkpXG5jb2xsZWN0aW9uTWFyc2hhbGxlcnMuc2V0KE1hcCwgdG9NYXApXG5jb2xsZWN0aW9uTWFyc2hhbGxlcnMuc2V0KFNldCwgdG9TZXQpXG5cbi8vIENvbnZlcnQgY29sbGVjdGlvbiBtYXJzaGFsbGVyIHRvIHJlZ3VsYXIgbWFyc2hhbGxlcnMgZm9yIHR5cGUgbWFyc2hhbGxpbmcgd2l0aG91dCBpdGVtIG1hcnNoYWxsaW5nXG5jb2xsZWN0aW9uTWFyc2hhbGxlcnMuZm9yRWFjaCgobWFyc2hhbGxlcjogQ29sbGVjdGlvbk1hcnNoYWxsZXJGdW5jdGlvbiwga2V5OiBEZWNvZGVyUHJvdG90eXBhbFRhcmdldCkgPT4ge1xuICAgIG1hcnNoYWxsZXJzLnNldChrZXksIGNvbnZlcnRDb2xsZWN0aW9uTWFyc2hhbGxlclRvTWFyc2hhbGxlcihtYXJzaGFsbGVyKSlcbn0pXG5cbi8qKlxuICogRnVuY3Rpb24gaW50ZXJmYWNlIGZvciBzaW1wbGUgbWFyc2hhbGxlcnNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBNYXJzaGFsbGVyRnVuY3Rpb24ge1xuICAgICh2YWx1ZTogYW55LCBzdHJpY3Q/OiBib29sZWFuKTogYW55XG59XG5cbi8qKlxuICogUmV0dXJucyBhIG1hcnNoYWxsZXIgZnVuY3Rpb24gZm9yIGEgZ2l2ZW4gdHlwZVxuICpcbiAqIEBwYXJhbSB0eXBlIC0gVHlwZSB0byByZXR1cm4gYSBtYXJzaGFsbGVyIGZvclxuICogQHJldHVybnMgbWFyc2hhbGxlciBmdW5jdGlvbiBvciB1bmRlZmluZWQgaWYgbm90IGJ1aWx0LWluXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYXJzaGFsbGVyRm9yVHlwZSh0eXBlOiBEZWNvZGVyUHJvdG90eXBhbFRhcmdldCk6ICgodmFsdWU6IGFueSwgc3RyaWN0PzogYm9vbGVhbikgPT4gYW55KSB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIG1hcnNoYWxsZXJzLmdldCh0eXBlKVxufVxuXG4vKipcbiAqIEZ1bmN0aW9uIGludGVyZmFjZSBmb3IgY29sbGVjdGlvbiBiYXNlZCBtYXJzaGFsbGVyc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIENvbGxlY3Rpb25NYXJzaGFsbGVyRnVuY3Rpb24ge1xuICAgICh2YWx1ZTogYW55LCBpdGVtTWFyc2hhbGxlcj86ICh2YWx1ZTogYW55LCBzdHJpY3Q/OiBib29sZWFuKSA9PiBhbnksIHN0cmljdD86IGJvb2xlYW4pOiBhbnlcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgY29sbGVjdGlvbiBtYXJzaGFsbGVyIGZ1bmN0aW9uIGZvciBhIGdpdmVuIHR5cGVcbiAqXG4gKiBAcGFyYW0gdHlwZSAtIFR5cGUgdG8gcmV0dXJuIGEgbWFyc2hhbGxlciBmb3JcbiAqIEByZXR1cm5zIG1hcnNoYWxsZXIgZnVuY3Rpb24gb3IgdW5kZWZpbmVkIGlmIG5vdCBidWlsdC1pblxuICovXG5leHBvcnQgZnVuY3Rpb24gY29sbGVjdGlvbk1hcnNoYWxsZXJGb3JUeXBlKHR5cGU6IERlY29kZXJQcm90b3R5cGFsVGFyZ2V0KTogQ29sbGVjdGlvbk1hcnNoYWxsZXJGdW5jdGlvbiB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIGNvbGxlY3Rpb25NYXJzaGFsbGVycy5nZXQodHlwZSlcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIGNvbGxlY3Rpb24gbWFyc2hhbGxlciB0byBhIHN0YW5kYXJkIG1hcnNoYWxsZXIgZnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0gbWFyc2hhbGxlciAtIGNvbGxlY3Rpb24gbWFyc2hhbGxlciB0byBjb252ZXJ0XG4gKiBAcmV0dXJuIG5vbiBjb2xsZWN0aW9uIG1hcnNoYWxsZXIgZnVuY3Rpb25cbiAqL1xuZnVuY3Rpb24gY29udmVydENvbGxlY3Rpb25NYXJzaGFsbGVyVG9NYXJzaGFsbGVyKG1hcnNoYWxsZXI6IENvbGxlY3Rpb25NYXJzaGFsbGVyRnVuY3Rpb24pOiBNYXJzaGFsbGVyRnVuY3Rpb24ge1xuICAgIHJldHVybiAodmFsdWU6IGFueSwgc3RyaWN0PzogYm9vbGVhbik6IGFueSA9PiB7XG4gICAgICAgIHJldHVybiBtYXJzaGFsbGVyKHZhbHVlLCAoaXRlbSkgPT4gaXRlbSwgc3RyaWN0KVxuICAgIH1cbn0iXX0=