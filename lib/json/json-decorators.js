"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("reflect-metadata");
const createDebugLog = require("debug");
const decoder_declarations_1 = require("../decoder/decoder-declarations");
const decoder_declarations_2 = require("../decoder/decoder-declarations");
const decoder_map_1 = require("../decoder/decoder-map");
const json_symbols_1 = require("./json-symbols");
const debug = createDebugLog('decoder:json');
function jsonDecodable(options) {
    return (target) => {
        debug(`${target.name} applying jsonDecodable with options ${JSON.stringify(options)}`);
        Reflect.defineMetadata(decoder_declarations_1.DecoderMetadataKeys.decodable, true, target);
        const decodableOptions = Object.assign({}, options);
        Reflect.defineMetadata(decoder_declarations_1.DecoderMetadataKeys.decodableOptions, decodableOptions, target);
        return target;
    };
}
exports.jsonDecodable = jsonDecodable;
function jsonSchema(schema, ...references) {
    return (target) => {
        debug(`${target.name} applying jsonSchema`);
        const schemaMetadata = {
            schema,
            references,
        };
        Reflect.defineMetadata(json_symbols_1.JsonDecoderMetadataKeys.schema, schemaMetadata, target);
        return target;
    };
}
exports.jsonSchema = jsonSchema;
function jsonContext(target, key) {
    debug(`${target.constructor.name} applying jsonContext to ${key}`);
    Reflect.defineMetadata(json_symbols_1.JsonDecoderMetadataKeys.context, key, target.constructor);
    const descriptor = Reflect.getOwnPropertyDescriptor(target, key);
    Reflect.defineProperty(target, key, {
        configurable: true,
        writable: true,
        enumerable: false,
        value: !!descriptor ? descriptor.value : undefined,
    });
    if (!('toJSON' in target)) {
        target['toJSON'] = function toJSON() {
            return Object.assign({}, this[key]);
        };
    }
}
exports.jsonContext = jsonContext;
function jsonProperty(target, key) {
    debug(`${target.constructor.name} applying jsonProperty to ${key}`);
    const decoderMap = decoder_map_1.decoderMapEntryForTarget(key, target.constructor);
    if (typeof decoderMap.key !== 'string' || decoderMap.key.length === 0) {
        decoderMap.key = key;
    }
}
exports.jsonProperty = jsonProperty;
function jsonPropertyAlias(keyPath) {
    if (typeof keyPath !== 'string' || keyPath.length === 0) {
        throw new TypeError('jsonProperty(keyPath) should be a non-empty String');
    }
    return (target, key) => {
        const decoderMap = decoder_map_1.decoderMapEntryForTarget(key, target.constructor);
        if (keyPath) {
            decoderMap.key = keyPath;
        }
    };
}
exports.jsonPropertyAlias = jsonPropertyAlias;
function jsonType(type, mapFunction) {
    if (Array.isArray(type) && type.length !== 1) {
        throw new TypeError('jsonType(type) should have exactly one element for Array types');
    }
    return (target, key) => {
        const decoderMapEntry = decoder_map_1.decoderMapEntryForTarget(key, target.constructor);
        const elementType = decoder_declarations_2.isDecoderPrototypalCollectionTarget(type) ? type.collection : type;
        debug(`${target.constructor.name} applying jsonType to ${key}, marshalling using ${elementType.name}`);
        decoderMapEntry.type = type;
        decoderMapEntry.mapFunction = mapFunction;
    };
}
exports.jsonType = jsonType;
function jsonDecoderFactory(target, key, descriptor) {
    debug(`${target.name} applying jsonDecoderFactory to ${key}`);
    Reflect.defineMetadata(decoder_declarations_1.DecoderMetadataKeys.decoderFactory, target[key], target);
    return descriptor;
}
exports.jsonDecoderFactory = jsonDecoderFactory;
function jsonDecoder(target, key, descriptor) {
    debug(`${target.constructor.name} applying jsonDecoder to ${key}`);
    Reflect.defineMetadata(decoder_declarations_1.DecoderMetadataKeys.decoder, target[key], target);
    return descriptor;
}
exports.jsonDecoder = jsonDecoder;
function jsonDecoderCompleted(target, key, descriptor) {
    debug(`${target.constructor.name} applying jsonDecoderCompleted to ${key}`);
    Reflect.defineMetadata(decoder_declarations_1.DecoderMetadataKeys.decoderCompleted, target[key], target);
    return descriptor;
}
exports.jsonDecoderCompleted = jsonDecoderCompleted;
function jsonNotify(keyPath, type) {
    if (typeof keyPath !== 'string') {
        throw new TypeError('jsonPropertyHandler(keyPath) should be a non-empty String');
    }
    if (Array.isArray(type) && type.length !== 1) {
        throw new TypeError('jsonPropertyHandler(type) should have exactly one element for Array types');
    }
    return (target, key, descriptor) => {
        debug(`${target.constructor.name} applying jsonPropertyHandler ${keyPath} to ${key}`);
        let notifiers = Reflect.getOwnMetadata(decoder_declarations_1.DecoderMetadataKeys.decoderNotifiers, target.constructor);
        if (!notifiers) {
            notifiers = new Map();
            Reflect.defineMetadata(decoder_declarations_1.DecoderMetadataKeys.decoderNotifiers, notifiers, target.constructor);
        }
        let propertyNotifiers = notifiers.get(keyPath);
        if (!propertyNotifiers) {
            propertyNotifiers = [];
            notifiers.set(keyPath, propertyNotifiers);
        }
        propertyNotifiers.push({
            key: keyPath,
            type,
            mapFunction: descriptor.value,
        });
        return descriptor;
    };
}
exports.jsonNotify = jsonNotify;
//# sourceMappingURL=data:application/json;base64,