"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const json_decoder_errors_1 = require("./json-decoder-errors");
class JsonValidationError extends json_decoder_errors_1.JsonDecoderError {
}
exports.JsonValidationError = JsonValidationError;
class JsonValidatorPropertyError extends JsonValidationError {
    constructor(propertyPath, property, message) {
        super(message);
        this.property = property;
        this.propertyPath = propertyPath;
    }
}
exports.JsonValidatorPropertyError = JsonValidatorPropertyError;
class JsonValidatorPropertyMissingError extends JsonValidatorPropertyError {
}
exports.JsonValidatorPropertyMissingError = JsonValidatorPropertyMissingError;
class JsonValidatorPropertyUnsupportedError extends JsonValidatorPropertyError {
}
exports.JsonValidatorPropertyUnsupportedError = JsonValidatorPropertyUnsupportedError;
class JsonValidatorPropertyValueError extends JsonValidatorPropertyError {
    constructor(propertyPath, value, message) {
        super(propertyPath, propertyPath.split('.').pop(), message);
        this.value = value;
    }
}
exports.JsonValidatorPropertyValueError = JsonValidatorPropertyValueError;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianNvbi12YWxpZGF0aW9uLWVycm9ycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9qc29uL2pzb24tdmFsaWRhdGlvbi1lcnJvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrREFBd0Q7QUFReEQsTUFBc0IsbUJBQW9CLFNBQVEsc0NBQWdCO0NBQUk7QUFBdEUsa0RBQXNFO0FBS3RFLE1BQXNCLDBCQUEyQixTQUFRLG1CQUFtQjtJQWdCeEUsWUFBWSxZQUFvQixFQUFFLFFBQWdCLEVBQUUsT0FBZTtRQUMvRCxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUE7UUFFZCxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQTtRQUN4QixJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQTtJQUNwQyxDQUFDO0NBQ0o7QUF0QkQsZ0VBc0JDO0FBS0QsTUFBYSxpQ0FBa0MsU0FBUSwwQkFBMEI7Q0FBRztBQUFwRiw4RUFBb0Y7QUFLcEYsTUFBYSxxQ0FBc0MsU0FBUSwwQkFBMEI7Q0FBRztBQUF4RixzRkFBd0Y7QUFLeEYsTUFBYSwrQkFBZ0MsU0FBUSwwQkFBMEI7SUFXM0UsWUFBWSxZQUFvQixFQUFFLEtBQVUsRUFBRSxPQUFlO1FBQ3pELEtBQUssQ0FBQyxZQUFZLEVBQUUsWUFBWSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQTtRQUU1RCxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQTtJQUN0QixDQUFDO0NBQ0o7QUFoQkQsMEVBZ0JDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSnNvbkRlY29kZXJFcnJvciB9IGZyb20gJy4vanNvbi1kZWNvZGVyLWVycm9ycydcblxuLy8gV2UgaGF2ZSBtb3JlIHRoYW4gMyBjbGFzc2VzLCB0aGlzIGlzIG9rXG4vLyB0c2xpbnQ6ZGlzYWJsZTptYXgtY2xhc3Nlcy1wZXItZmlsZVxuXG4vKipcbiAqIEJhc2UgZXJyb3IgZm9yIGFsbCB2YWxpZGF0aW9uIGVycm9yc1xuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgSnNvblZhbGlkYXRpb25FcnJvciBleHRlbmRzIEpzb25EZWNvZGVyRXJyb3IgeyB9XG5cbi8qKlxuICogQmFzZSBlcnJvciBmb3IgYWxsIHZhbGlkYXRpb24gcHJvcGVydHkgZXJyb3JzXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBKc29uVmFsaWRhdG9yUHJvcGVydHlFcnJvciBleHRlbmRzIEpzb25WYWxpZGF0aW9uRXJyb3Ige1xuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IG5hbWVcbiAgICAgKi9cbiAgICByZWFkb25seSBwcm9wZXJ0eTogc3RyaW5nXG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBwYXRoIGZyb20gdGhlIHJvb3RcbiAgICAgKi9cbiAgICByZWFkb25seSBwcm9wZXJ0eVBhdGg6IHN0cmluZ1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHByb3BlcnR5UGF0aCAtIHBhdGggdG8gcHJvcGVydHlcbiAgICAgKiBAcGFyYW0gcHJvcGVydHkgLSBpbmRlcGVkZW50IHByb3BlcnR5IG5hbWVcbiAgICAgKiBAcGFyYW0gbWVzc2FnZSAtIGVycm9yIG1lc3NhZ2VcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihwcm9wZXJ0eVBhdGg6IHN0cmluZywgcHJvcGVydHk6IHN0cmluZywgbWVzc2FnZTogc3RyaW5nKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpXG5cbiAgICAgICAgdGhpcy5wcm9wZXJ0eSA9IHByb3BlcnR5XG4gICAgICAgIHRoaXMucHJvcGVydHlQYXRoID0gcHJvcGVydHlQYXRoXG4gICAgfVxufVxuXG4vKipcbiAqIEVycm9yIHdoZW4gdmFsaWRhdGlvbiBmaW5kcyBhIG1pc3NpbmcgcHJvcGVydHkgZGVjbGFyYXRpb25cbiAqL1xuZXhwb3J0IGNsYXNzIEpzb25WYWxpZGF0b3JQcm9wZXJ0eU1pc3NpbmdFcnJvciBleHRlbmRzIEpzb25WYWxpZGF0b3JQcm9wZXJ0eUVycm9yIHt9XG5cbi8qKlxuICogRXJyb3Igd2hlbiB2YWxpZGF0aW9uIGZpbmRzIGEgcHJvcGVydHkgbm90IHN1cHBvcnRlZCBieSB0aGUgc2NoZW1hXG4gKi9cbmV4cG9ydCBjbGFzcyBKc29uVmFsaWRhdG9yUHJvcGVydHlVbnN1cHBvcnRlZEVycm9yIGV4dGVuZHMgSnNvblZhbGlkYXRvclByb3BlcnR5RXJyb3Ige31cblxuLyoqXG4gKiBFcnJvciB3aGVuIHZhbGlkYXRpb24gZmluZHMgYSBwcm9wZXJ0eSB2YWx1ZSB0byBiZSBpbnZhbGlkIGRlY2xhcmF0aW9uXG4gKi9cbmV4cG9ydCBjbGFzcyBKc29uVmFsaWRhdG9yUHJvcGVydHlWYWx1ZUVycm9yIGV4dGVuZHMgSnNvblZhbGlkYXRvclByb3BlcnR5RXJyb3Ige1xuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHZhbHVlXG4gICAgICovXG4gICAgcmVhZG9ubHkgdmFsdWU6IGFueVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHByb3BlcnR5UGF0aCAtIHBhdGggdG8gcHJvcGVydHlcbiAgICAgKiBAcGFyYW0gdmFsdWUgLSBwcm9wZXJ0eSB2YWx1ZVxuICAgICAqIEBwYXJhbSBtZXNzYWdlIC0gZXJyb3IgbWVzc2FnZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHByb3BlcnR5UGF0aDogc3RyaW5nLCB2YWx1ZTogYW55LCBtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICAgICAgc3VwZXIocHJvcGVydHlQYXRoLCBwcm9wZXJ0eVBhdGguc3BsaXQoJy4nKS5wb3AoKSEsIG1lc3NhZ2UpXG5cbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlXG4gICAgfVxufSJdfQ==