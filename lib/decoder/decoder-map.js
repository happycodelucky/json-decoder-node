"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.decoderMapEntryForTarget = exports.decoderMapForTarget = void 0;
const decoder_declarations_1 = require("./decoder-declarations");
function decoderMapForTarget(target) {
    const map = Reflect.getOwnMetadata(decoder_declarations_1.DecoderMetadataKeys.decoderMap, target) ||
        Reflect.get(target, decoder_declarations_1.DecoderMetadataKeys.decoderMap);
    if (map) {
        return map;
    }
    Reflect.defineMetadata(decoder_declarations_1.DecoderMetadataKeys.decoderMap, {}, target);
    return Reflect.getOwnMetadata(decoder_declarations_1.DecoderMetadataKeys.decoderMap, target);
}
exports.decoderMapForTarget = decoderMapForTarget;
function decoderMapEntryForTarget(key, target) {
    const decoderMap = decoderMapForTarget(target);
    let entry = decoderMap[key];
    if (entry === undefined) {
        entry = {
            key,
        };
        decoderMap[key] = entry;
    }
    return entry;
}
exports.decoderMapEntryForTarget = decoderMapEntryForTarget;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjb2Rlci1tYXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZGVjb2Rlci9kZWNvZGVyLW1hcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFPQSxpRUFBd0g7QUFtQ3hILFNBQWdCLG1CQUFtQixDQUFDLE1BQStCO0lBQy9ELE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUMsMENBQW1CLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQztRQUN0RSxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSwwQ0FBbUIsQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUN2RCxJQUFJLEdBQUcsRUFBRTtRQUNMLE9BQU8sR0FBRyxDQUFBO0tBQ2I7SUFHRCxPQUFPLENBQUMsY0FBYyxDQUFDLDBDQUFtQixDQUFDLFVBQVUsRUFBRSxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUE7SUFFbEUsT0FBTyxPQUFPLENBQUMsY0FBYyxDQUFDLDBDQUFtQixDQUFDLFVBQVUsRUFBRSxNQUFNLENBQWUsQ0FBQTtBQUN2RixDQUFDO0FBWEQsa0RBV0M7QUFTRCxTQUFnQix3QkFBd0IsQ0FBQyxHQUFXLEVBQUUsTUFBK0I7SUFDakYsTUFBTSxVQUFVLEdBQUcsbUJBQW1CLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDOUMsSUFBSSxLQUFLLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQzNCLElBQUksS0FBSyxLQUFLLFNBQVMsRUFBRTtRQUNyQixLQUFLLEdBQUc7WUFDSixHQUFHO1NBQ04sQ0FBQTtRQUNELFVBQVUsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUE7S0FDMUI7SUFFRCxPQUFPLEtBQUssQ0FBQTtBQUNoQixDQUFDO0FBWEQsNERBV0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBtb2R1bGUganNvbi1kZWNvZGVyXG4gKlxuICogVHlwZSBhbmQgaW50ZXJmYWNlcyB0byBzdXBwb3J0IGRlY29kZXIgbWFwcGluZ1xuICovXG5cbmltcG9ydCB7IEpzb25PYmplY3QgfSBmcm9tICcuLi9qc29uL2pzb24tZGVjb2RhYmxlLXR5cGVzJ1xuaW1wb3J0IHsgRGVjb2Rlck1ldGFkYXRhS2V5cywgRGVjb2RlclByb3RvdHlwYWxDb2xsZWN0aW9uVGFyZ2V0LCBEZWNvZGVyUHJvdG90eXBhbFRhcmdldCB9IGZyb20gJy4vZGVjb2Rlci1kZWNsYXJhdGlvbnMnXG5cbi8qKlxuICogRGVjb2RlciBtYXAgYWxpYXMgZW50cnkgaW4gYSBkZWNvZGVyIGNvbmZpZ3VyYXRpb24gbWFwXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGVjb2Rlck1hcEVudHJ5IHtcbiAgICAvKipcbiAgICAgKiBKU09OIHByb3BlcnR5IGtleVxuICAgICAqL1xuICAgIGtleTogc3RyaW5nXG4gICAgLyoqXG4gICAgICogVHlwZSB0byBtYXJzaGFsIGEgcHJvcGVydHkgdmFsdWUgdG9cbiAgICAgKi9cbiAgICB0eXBlPzogb2JqZWN0ICYgKERlY29kZXJQcm90b3R5cGFsVGFyZ2V0IHwgRGVjb2RlclByb3RvdHlwYWxDb2xsZWN0aW9uVGFyZ2V0KVxuICAgIC8qKlxuICAgICAqIE1hcCBmdW5jdGlvbiB0YWtpbmcgdGhlIG1hcnNoYWxlZCB2YWx1ZSAoYXJyYXksIG9iamVjdCBvciBzY2FsYXIpIGFuZCBhcHBsaWVzIGFub3RoZXIgbGV2ZWwgb2YgbWFwcGluZ1xuICAgICAqL1xuICAgIG1hcEZ1bmN0aW9uPyh2YWx1ZTogYW55LCBvYmplY3Q6IEpzb25PYmplY3QpOiBhbnlcbn1cblxuLyoqXG4gKiBEZWNvZGVyIGNvbmZpZ3VyYXRpb24gbWFwXG4gKiBBIGtleS9lbnRyeSBwYWlyIGZvciBwcm9wZXJ0aWVzIHRvIG1hcCBKU09OIHByb3BlcnRpZXMgdG8gZGVjb2RlZCBvYmplY3QgcHJvcGVydGllc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIERlY29kZXJNYXAgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nIHwgbnVtYmVyIHwgc3ltYm9sLCBEZWNvZGVyTWFwRW50cnkgfCB1bmRlZmluZWQ+e1xuXG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZGVjb2RlciBtYXAgZm9yIGEgZ2l2ZW4gdGFyZ2V0IGNsYXNzIHR5cGVcbiAqXG4gKiBAcGFyYW0gdGFyZ2V0IC0gdGFyZ2V0IGNvbnN0cnVjdG9yIGZ1bmN0aW9uXG4gKlxuICogQHJldHVybiBkZWNvZGVyIG1hcCBvYmplY3QgdG8gYXNzaWduIEpTT04gZGVjb2RpbmcgY29uZmlndXJhdGlvbiB0b1xuICovXG5leHBvcnQgZnVuY3Rpb24gZGVjb2Rlck1hcEZvclRhcmdldCh0YXJnZXQ6IERlY29kZXJQcm90b3R5cGFsVGFyZ2V0KTogRGVjb2Rlck1hcCB7XG4gICAgY29uc3QgbWFwID0gUmVmbGVjdC5nZXRPd25NZXRhZGF0YShEZWNvZGVyTWV0YWRhdGFLZXlzLmRlY29kZXJNYXAsIHRhcmdldCkgfHxcbiAgICAgICAgUmVmbGVjdC5nZXQodGFyZ2V0LCBEZWNvZGVyTWV0YWRhdGFLZXlzLmRlY29kZXJNYXApXG4gICAgaWYgKG1hcCkge1xuICAgICAgICByZXR1cm4gbWFwXG4gICAgfVxuXG4gICAgLy8gU2V0IGFuIGVtcHR5IGRlY29kZXIgbWFwXG4gICAgUmVmbGVjdC5kZWZpbmVNZXRhZGF0YShEZWNvZGVyTWV0YWRhdGFLZXlzLmRlY29kZXJNYXAsIHt9LCB0YXJnZXQpXG5cbiAgICByZXR1cm4gUmVmbGVjdC5nZXRPd25NZXRhZGF0YShEZWNvZGVyTWV0YWRhdGFLZXlzLmRlY29kZXJNYXAsIHRhcmdldCkgYXMgRGVjb2Rlck1hcFxufVxuXG4vKipcbiAqIFJldHVybnMgYSBkZWNvZGVyIG1hcCBlbnRyeSBnaXZlbiBhIGVudHJ5IGtleSBhbmQgYSB0YXJnZXQgY2xhc3MgdHlwZVxuICpcbiAqIEBwYXJhbSBrZXkgLSBwcm9wZXJ0eSBrZXkgb24gdGhlIHRhcmdldFxuICogQHBhcmFtIHRhcmdldCAtIHRhcmdldCBjb25zdHJ1Y3RvciBmdW5jdGlvblxuICogQHBhcmFtIGRlY29kZXJNYXAgLSBkZWNvZGVyIG1hcCB0byBhc3NpZ24gdG8gdGhlIGNsYXNzIHR5cGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZXJNYXBFbnRyeUZvclRhcmdldChrZXk6IHN0cmluZywgdGFyZ2V0OiBEZWNvZGVyUHJvdG90eXBhbFRhcmdldCk6IERlY29kZXJNYXBFbnRyeSB7XG4gICAgY29uc3QgZGVjb2Rlck1hcCA9IGRlY29kZXJNYXBGb3JUYXJnZXQodGFyZ2V0KVxuICAgIGxldCBlbnRyeSA9IGRlY29kZXJNYXBba2V5XVxuICAgIGlmIChlbnRyeSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGVudHJ5ID0ge1xuICAgICAgICAgICAga2V5LFxuICAgICAgICB9XG4gICAgICAgIGRlY29kZXJNYXBba2V5XSA9IGVudHJ5XG4gICAgfVxuXG4gICAgcmV0dXJuIGVudHJ5XG59XG4iXX0=